var sDeviceID = "", sDevicePlatform = "windows", sDevicePlatformVersion = "7", sBufferXMLData = "", sLayoutID = "-1", sLayoutName = "", sCompanyID = "-1", sLocation = "Indonesia", sUserID = "-1", sXMLUrl = "", iXMLVersionNumber = 0, sPreloadImages = "", bFirstLoad = !0, iShowDebugLog = -1, iMixedContentTimerID = -1, iVersionCheckTimer = -1, iVideoCount = 0, arUpdatableFileList = [], arUpdatableFileFlag = [], arUpdatableFileMD5 = [], arUpdatableFileMD5Result = [], iUpdatableDownloadCounter = 0, bDownloadFailed = !1, bDownloading = !1, sOnlineMode = "Unknown", sInitScreen1 = $("#dvInitScreen1").html(), sInitScreen2 = $("#dvInitScreen2").html(), sInitScreen2b = $("#dvInitScreen2b").html(); function onDeviceReady() { initContent() } function initContent() { if ($(".dvReset").css("visibility", "hidden"), $(".dvReset").css("display", "none"), ClearAllTimeouts(), -1 < iMixedContentTimerID && clearInterval(iMixedContentTimerID), -1 != iVersionCheckTimer && clearInterval(iVersionCheckTimer), isVideoEnded = isVideoPlaying = !1, "windows" == sDevicePlatform) try { window.external.VLCPlayerStop() } catch (e) { } if (initDevice(), $("#dvDebugDisplay").removeClass("debugok").addClass("debughide"), isXMLDataExist()) { var e = getXMLDataStringFromStorage(); if (bFirstLoad) bFirstLoad = !1, deleteCache(), loadLayoutFromStorage(!0), runCheckVersionTimer(); else if (0 <= sXMLUrl.indexOf(".xml")) { $("#spRegions").html(sInitScreen2b), $("#btnBack").css("visibility", "visible"), $("#btnBack").css("display", "block"); var t = $("layout", e.data); $(t).each(function () { var e = $(this).find("version").text(), t = $(this).find("group").text(), i = ($(this).find("subgroup").text(), $(this).find("screen>width").text()), a = $(this).find("screen>height").text(); $("#spSTBCompanyB").html(t), $("#spSTBResolution").html(i + " x " + a), $("#spSTBVersion").html(e), "" == sDeviceID && (sDeviceID = "proto12345"), $("#spSTBID").html(GetDeviceID()), $("#spSTBIDb").html(GetDeviceID()), $("#spSTBLayout").html(sLayoutName), $("#spSTBLocation").html(sLocation), $("#spSTBConnection").html(sOnlineMode), $("#spSTBConnectionb").html(sOnlineMode) }) } else { $("#spRegions").html(sInitScreen2), $("#btnBack").css("visibility", "visible"), $("#btnBack").css("display", "block"); t = $("layout", e.data); $(t).each(function () { $(this).find("version").text(); var e = $(this).find("group").text(); $(this).find("subgroup").text(), $(this).find("screen>width").text(), $(this).find("screen>height").text(); $("#spSTBCompany").html(e), "" == sDeviceID && (sDeviceID = "proto12345"), $("#spSTBID").html(GetDeviceID()), $("#spSTBIDb").html(GetDeviceID()), $("#spSTBLayout").html(sLayoutName), $("#spSTBLocation").html(sLocation), $("#spSTBConnection").html(sOnlineMode), $("#spSTBConnectionb").html(sOnlineMode) }) } } else $("#spRegions").html(sInitScreen1), $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID) } function initDevice() { try { var e = "" + device.uuid, t = "" + device.platform, i = "" + device.version; SetDeviceID(e.toLowerCase()), SetDevicePlatform(t.toLocaleLowerCase(), i.toLocaleLowerCase()) } catch (e) { } try { writeToFile("notfound.txt", "404") } catch (e) { } } function getJSONDataStringFromURLAsync(e, t, d) { try { $.ajax({ type: "POST", method: "POST", cache: !1, url: e, dataType: "json", contentType: "application/x-www-form-urlencoded", data: t + "&r=" + getRandomID(10), processData: !1, crossDomain: !0, async: !0, success: function (e) { var t = { success: !0, data: e }; if (1 == d) try { if (t.success) { var i = t.data.verno, a = t.data.reqcode, o = t.data.reqtag, s = t.data.reqpar, r = 0; try { r = parseInt(t.data.success) } catch (e) { r = 0 } if (isNaN(r) && (r = 0), -1 == r) { if ($(".dvReset").css("visibility", "hidden"), $(".dvReset").css("display", "none"), ClearAllTimeouts(), -1 < iMixedContentTimerID && clearInterval(iMixedContentTimerID), -1 != iVersionCheckTimer && clearInterval(iVersionCheckTimer), isVideoEnded = isVideoPlaying = !1, "windows" == sDevicePlatform) try { window.external.VLCPlayerStop() } catch (e) { } bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1); try { $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID) } catch (e) { } return void MAlert("This device has been reset from CMS.") } i <= iXMLVersionNumber ? 1 == iShowDebugLog && ($("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>New version not found.</font>"), $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>Ver No = " + i + "</font>"), $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>Req Code = " + a + "</font>"), $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>Req Tag = " + o + "</font>"), $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>Req Par = " + s + "</font>"), 1 == a ? (1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Getting text log " + s + ".txt"), getTextLog(o, s)) : 2 == a ? (1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Getting screenshot ..."), getScreenShot(o)) : setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3)) : getJSONDataStringFromURLAsync(sXMLUrl, "act=getlayoutdata&deviceid=" + GetDeviceID() + "&layoutid=" + sLayoutID + "&r=" + getRandomID(10), 2) } else 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } catch (e) { 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } else if (2 == d) if (t.success) { var n = decodeURIComponent((t.data.xmldata + "").replace(/\+/g, "%20")), l = $("layout", n); $(l).each(function () { var e = $(this).find("version").text(), t = parseInt(e); if (isNaN(t) && (t = 0), iXMLVersionNumber < t) { try { setXMLDataStringToStorage(sBufferXMLData = n), deleteCache(), -1 != iVersionCheckTimer && clearInterval(iVersionCheckTimer), iLoadImageTimer = 0, isVideoEnded = isVideoPlaying = bFirstLoad = !1, ClearAllTimeouts(), loadLayoutFromStorage(!0), 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:green;'>New version detected, applying new layout...</font>"), 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>New layout applied!") } catch (e) { } 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } }) } else 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/><font style='color:red;'>Failed to load XML!</font>") }, error: function (t) { !1; try { void 0 === t.responseJSON.errmsg && t.status + " " + t.statusText } catch (e) { t.status + " " + t.statusText } }, timeout: 3e3 }) } catch (e) { } } function getJSONDataStringFromURL(e, t) { var i, a = !1; try { $.ajax({ type: "POST", method: "POST", cache: !1, url: e, dataType: "json", contentType: "application/x-www-form-urlencoded", data: t + "&r=" + getRandomID(10), processData: !1, crossDomain: !0, async: !1, success: function (e) { i = e, a = !0 }, error: function (t) { a = !1; try { void 0 === (i = t.responseJSON.errmsg) && (i = t.status + " " + t.statusText) } catch (e) { i = t.status + " " + t.statusText } }, timeout: 3e3 }) } catch (e) { a = !1, i = "" } return { success: a, data: i } } function getXMLDataStringFromURL(e) { var a = !1, o = ""; try { $.ajax({ type: "GET", cache: !1, url: e, dataType: "xml", crossDomain: !0, async: !1, success: function (e) { (new XMLSerializer).serializeToString(e); o = (new XMLSerializer).serializeToString(e), a = !0 }, error: function (e, t, i) { a = !1, o = "" }, timeout: 5e3 }) } catch (e) { a = !1, o = "" } return { success: a, data: o } } function setDownloadingStatus() { try { var e = 0; 1 == bDownloading && (e = 1); try { window.localStorage.setItem("filedownloading", e) } catch (e) { } if ("windows" == sDevicePlatform) try { window.external.SetLocalStorage("filedownloading", e) } catch (e) { } } catch (e) { } } function getDownloadingStatus() { var e = !1; try { var t = 0; try { t = window.localStorage.getItem("filedownloading") } catch (e) { } if ("windows" == sDevicePlatform) try { t = window.external.GetLocalStorage("filedownloading") } catch (e) { } 1 == t && (e = !0) } catch (e) { } return e } function setXMLDataStringToStorage(e) { var t = !1; try { try { window.localStorage.setItem("xmldata", e), window.localStorage.setItem("xmlurl", sXMLUrl), window.localStorage.setItem("layoutid", sLayoutID), window.localStorage.setItem("layoutname", sLayoutName), window.localStorage.setItem("location", sLocation), window.localStorage.setItem("companyid", sCompanyID), window.localStorage.setItem("deviceid", sDeviceID), window.localStorage.setItem("network", sOnlineMode), t = !0 } catch (e) { } if ("windows" == sDevicePlatform) try { window.external.SetLocalStorage("xmldata", e), window.external.SetLocalStorage("xmlurl", sXMLUrl), window.external.SetLocalStorage("layoutid", sLayoutID), window.external.SetLocalStorage("layoutname", sLayoutName), window.external.SetLocalStorage("location", sLocation), window.external.SetLocalStorage("companyid", sCompanyID), window.external.SetLocalStorage("deviceid", sDeviceID), window.external.SetLocalStorage("network", sOnlineMode), t = !0 } catch (e) { } } catch (e) { t = !1 } return t } function getXMLDataStringFromStorage() { var t = !1, i = ""; try { try { i = window.localStorage.getItem("xmldata"), sXMLUrl = window.localStorage.getItem("xmlurl"), sLayoutID = window.localStorage.getItem("layoutid"), sLayoutName = window.localStorage.getItem("layoutname"), sLocation = window.localStorage.getItem("location"), sCompanyID = window.localStorage.getItem("companyid"), sDeviceID = window.localStorage.getItem("deviceid"), sOnlineMode = window.localStorage.getItem("network") } catch (e) { } if ("windows" == sDevicePlatform) try { i = window.external.GetLocalStorage("xmldata"), sXMLUrl = window.external.GetLocalStorage("xmlurl"), sLayoutID = window.external.GetLocalStorage("layoutid"), sLayoutName = window.external.GetLocalStorage("layoutname"), sLocation = window.external.GetLocalStorage("location"), sCompanyID = window.external.GetLocalStorage("companyid"), sDeviceID = window.external.GetLocalStorage("deviceid"), sOnlineMode = window.external.GetLocalStorage("network") } catch (e) { } null == i || "" == i ? (t = !1, i = "") : t = !0 } catch (e) { t = !1, i = "" } return { success: t, data: i } } function isXMLDataExist() { var e = ""; try { e = window.localStorage.getItem("xmldata") } catch (e) { } if ("windows" == sDevicePlatform) try { e = window.external.GetLocalStorage("xmldata") } catch (e) { } return null != e && "" != e } function deleteXMLDataStringFromStorage() { try { window.localStorage.removeItem("xmldata") } catch (e) { } try { "windows" == sDevicePlatform && window.external.DeleteLocalStorage("xmldata") } catch (e) { } } function stbRetrieve() { var e = "", t = "", i = "", a = "", o = ""; try { if (e = document.getElementById("txServerIP").value, t = document.getElementById("txServerPort").value, i = document.getElementById("txUserName").value, a = document.getElementById("txUserPass").value, "core" == e || "0" == e) { if ((r = getXMLDataStringFromURL(sXMLUrl = o = "data.xml")).success) { sBufferXMLData = r.data, $("#spRegions").html(sInitScreen2b), bFirstLoad ? ($("#btnBack").css("visibility", "hidden"), $("#btnBack").css("display", "none")) : ($("#btnBack").css("visibility", "visible"), $("#btnBack").css("display", "block")); var s = $("layout", r.data); $(s).each(function () { var e = $(this).find("version").text(), t = $(this).find("group").text(), i = $(this).find("subgroup").text(), a = $(this).find("screen>width").text(), o = $(this).find("screen>height").text(); $("#spSTBCompanyB").html(t + "</br>" + i), $("#spSTBResolution").html(a + " x " + o), $("#spSTBVersion").html(e), "" == sDeviceID && (sDeviceID = "proto12345"), $("#spSTBID").html(GetDeviceID()), $("#spSTBIDb").html(GetDeviceID()), $("#spSTBLocation").html(sLocation), $("#spSTBConnection").html(sOnlineMode), $("#spSTBConnectionb").html(sOnlineMode) }) } else MAlert("Failed to load layout data from " + o + "."); return } var r; if ("" == t && (t = "80"), "1" == e && (e = "192.168.0.236", t = "80", i = "nspushmail@gmail.com", a = "st3ph3n"), (r = getJSONDataStringFromURL(sXMLUrl = o = "http://" + e + ":" + t + "/stbapi.php", "act=login&uname=" + i + "&passwd=" + a + "&r=" + getRandomID(10))).success) try { if (1 == r.data.success) { $("#spRegions").html(sInitScreen2), bFirstLoad ? ($("#btnBack").css("visibility", "hidden"), $("#btnBack").css("display", "none"), $("#btnReset").val("CANCEL"), $("#spSTBLocation").html("<input id='txLocation' type='text' inputmode='text' style='width:55%;' maxlength='249' />")) : ($("#btnBack").css("visibility", "visible"), $("#btnBack").css("display", "block"), $("#spSTBLocation").html(sLocation), $("#spSTBConnection").html(sOnlineMode), $("#spSTBConnectionb").html(sOnlineMode)), $("#spSTBCompany").html(r.data.companyname), "" == sDeviceID && (sDeviceID = "proto12345"), $("#spSTBID").html(GetDeviceID()), $("#spSTBIDb").html(GetDeviceID()), sUserID = "" + r.data.userid, sCompanyID = "" + r.data.companyid; for (var n = "", l = 0; l < r.data.layout.length; l++) n += "<option value='" + r.data.layout[l].id + "'>" + r.data.layout[l].name + "</option>"; 0 < r.data.layout.length && (n = "<select id='ddSTBLayout' style='position:absolute;min-width: 30%;max-width: 99%'>" + n + "</select>", $("#spSTBLayout").html(n)) } else MAlert(r.data.errmsg) } catch (e) { MAlert("JSON data received but invalid.") } else { var d = ""; try { d = r.data } catch (e) { } MAlert("Failed to load JSON data from " + o + ". " + d) } } catch (e) { MAlert(e.message) } } function stbBack() { for (var e = 0, t = 0; t < arUpdatableFileMD5Result.length; t++) "0" == arUpdatableFileMD5Result[t] && e++; if (0 < e) return $("#spRegions").html("<div style='width:100%;height:100%;background-color:black;'><center><h1 style='color:white;'><br/><br/><br/><br/><br/>Invalid content detected, please reset device!</h1></center></div>"), $(".dvReset").css("visibility", "visible"), void $(".dvReset").css("display", "block"); loadLayoutFromStorage(!1), runCheckVersionTimer() } function stbReset() { if (bFirstLoad) return bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1); if (MConfirm("Are you sure? This will delete the current saved layout permanently.")) try { if ("Offline" == sOnlineMode) { bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1); try { $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID) } catch (e) { } } else if (oData = getJSONDataStringFromURL(sXMLUrl, "act=unreg&deviceid=" + GetDeviceID() + "&companyid=" + sCompanyID + "&r=" + getRandomID(10)), oData.success) { oData.success; bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1); try { $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID) } catch (e) { } } else MAlert("Unable to request reset, reset cancelled!") } catch (e) { MAlert("Unable to request reset, reset cancelled!") } } function stbReset2() { try { if (bDownloading && ClearAllTimeouts(), oData = getJSONDataStringFromURL(sXMLUrl, "act=unreg&deviceid=" + GetDeviceID() + "&r=" + getRandomID(10)), oData.success) { oData.success; $("#btnReset2").css("visibility", "hidden"), $("#spRegions").html(sInitScreen1); try { $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID) } catch (e) { } } else MAlert("Unable to request reset, reset cancelled!"), bDownloading && ($("#spPrepInfo").html(""), loadLayoutFromStorage(!0)) } catch (e) { MAlert("Unable to request reset, reset cancelled!"), bDownloading && ($("#spPrepInfo").html(""), loadLayoutFromStorage(!0)) } } function stbSave() { try { var e; if (bFirstLoad) { sLayoutID = $("#ddSTBLayout").val(), sLayoutName = $("#ddSTBLayout :selected").text(), sLocation = $("#txLocation").val(), e = getJSONDataStringFromURL(sXMLUrl, "act=reg&location=" + encodeURI(sLocation) + "&companyid=" + sCompanyID + "&userid=" + sUserID + "&deviceid=" + GetDeviceID() + "&osversion=" + GetDevicePlatformVersion() + "&deviceos=" + GetDevicePlatformName() + "&layoutid=" + sLayoutID + "&r=" + getRandomID(10)); var t = ""; try { t = e.data } catch (e) { t = e.message } if (!e.success) return 0 <= sXMLUrl.indexOf(".xml") ? setXMLDataStringToStorage(sBufferXMLData) ? (deleteCache(), void loadLayoutFromStorage(!0)) : void 0 : (MAlert("Unable to register STB! " + t), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1)); e.success } if (!(e = getJSONDataStringFromURL(sXMLUrl, "act=getlayoutdata&deviceid=" + GetDeviceID() + "&layoutid=" + sLayoutID + "&r=" + getRandomID(10))).success) return MAlert("Unable to get layout! " + e.data), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1); if (setXMLDataStringToStorage(sBufferXMLData = decodeURIComponent((e.data.xmldata + "").replace(/\+/g, "%20")))) return deleteCache(), void loadLayoutFromStorage(!0) } catch (e) { } MAlert("Layout is not saved!"), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1) } function loadLayoutFromStorage(e) { var t = ""; RegionListClear(), initDevice(); try { t = window.localStorage.getItem("xmldata") } catch (e) { } if ("windows" == sDevicePlatform) try { t = window.external.GetLocalStorage("xmldata") } catch (e) { } try { var i = $("layout", t); $(i).each(function () { var e = $(this).find("version").text(); iXMLVersionNumber = parseInt(e, 10), isNaN(iXMLVersionNumber) && (iXMLVersionNumber = 0) }) } catch (e) { iXMLVersionNumber = 0 } sBufferXMLData = t; i = $("region", t); var a = "", k = "", B = 0; iVideoCount = 0, bFirstSlide = !(bFirstLoad = !1), arUpdatableFileList = [], arUpdatableFileFlag = [], arUpdatableFileMD5 = [], arUpdatableFileMD5Result = [], $("#spPreLoadImages").html(""), sPreloadImages = "", $(i).each(function () { var w = "", L = $(this).find("posx").text(), x = $(this).find("posy").text(), I = $(this).find("posz").text(), T = $(this).find("width").text(), F = $(this).find("height").text(), C = $(this).find("name").text(); a += "<div style='position:absolute; top:" + x + "%; left:" + L + "%; width: " + T + "%; height: " + F + "%; z-index: " + I + "; background-color: transparent;' >"; var M = 0, R = 0, U = 0, P = 0, e = $(this).find("playlist>material"); $(e).each(function () { w = $(this).find("media").text(); var e = removeLineBreaks($(this).find("url").text()), t = $(this).find("materialid").text(), i = $(this).find("url").attr("linktype"), a = 1; try { a = parseInt($(this).find("new").text()) } catch (e) { a = 1 } if (isNaN(a) && (a = 1), "core" == i ? e = "md/" + e : "live" == i || "updatable" != i || "image" != w && "video" != w && "video2" != w && "background" != w || (arUpdatableFileList.push(e), arUpdatableFileFlag.push(a), arUpdatableFileMD5.push(t), arUpdatableFileMD5Result.push("1"), e = 0 == (e = getUpdatableFolder() + getFilename(e)).indexOf("/") ? "file://" + e : "file:///" + e), "android" == GetDevicePlatformName() && "video2" == w && (w = "video"), "video2" == w && "proto12345" == GetDeviceID() && (w = "video"), "background" == w) { var o = $(this).find("bgcolor").text(); 1 == ++U && ("" != e ? (sPreloadImages += "<img src='" + e + "'>", k += "<img class='nocursor' src='" + e + "?r=" + getRandomID(10) + "' srcori='" + e + "' style='position:absolute; width: 100%; height: 100%;' alt='' onerror='this.src=\"md/black1px.png\"'>") : k += "<div class='nocursor' style='width:100%;height:100%;background-color:" + o + ";'></div>") } else if ("webview" == w) { o = $(this).find("bgcolor").text(); var s = "wv" + getRandomID(10); 1 == ++P && (k += "" != e ? "<div style='width:100%;height:100%;border:none;'><iframe src='" + e + "' id='" + s + "' name='" + s + "' style='width:100%;height:100%;border:none;background-color:" + o + ";' sandbox='allow-forms allow-pointer-lock allow-same-origin allow-scripts' onload='onFrameLoaded(this)' onerror='onFrameError(this);'></iframe></div>" : "<div class='nocursor' style='width:100%;height:100%;background-color:white;'></div>") } else if ("movingtext" == w) { o = $(this).find("bgcolor").text(); var r = $(this).find("text").text(), n = $(this).find("border").text(), l = $(this).find("border").attr("color"), d = (o = $(this).find("background").text(), $(this).find("font").attr("color")), c = $(this).find("font").text(), g = 1, m = $(this).find("speed").text(), p = $(this).find("transtype").text(); try { g = parseFloat(c), isNaN(g) && (g = 100), g /= 100 } catch (e) { g = 1 } 1 == ++R && (k += "<div style='width: 100%; height: 100%; background-color: " + o + "; -webkit-box-shadow:inset 0px 0px 0px " + n + "px " + l + "; -moz-box-shadow:inset 0px 0px 0px " + n + "px " + l + "; box-shadow:inset 0px 0px 0px " + n + "px " + l + "; color:" + d + ";'><h1 id='dvMQ" + R + "Tx' style='height: 100%; color:" + d + "; visibility: hidden;' speed='" + m + "' transtype='" + p + "' >" + r + "</h1></div>") } else if ("image" == w) { var u = $(this).find("effect").text(), h = $(this).find("transtype").text(), D = $(this).find("duration").text(), y = $(this).find("startdate").text(), b = $(this).find("stopdate").text(), v = $(this).find("starttime").text(), f = $(this).find("stoptime").text(); "" != e && (1 == ++M && (B++, RegionListAdd(C, L, x, I, T, F), k += "<img id='imgScreen" + B + "Top' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' /><img id='imgScreen" + B + "Bottom' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' />"), RegionPlaylistAdd(B - 1, e, i, w, u, h, D, y, b, v, f), sPreloadImages += "<img id='org" + B + "-" + M + "' src='" + e + "' regname='" + C + "'>") } else if ("video" == w) { u = $(this).find("effect").text(), h = 1, D = 5e3; var S = "video/mp4"; y = $(this).find("startdate").text(), b = $(this).find("stopdate").text(), v = $(this).find("starttime").text(), f = $(this).find("stoptime").text(); S = -1 !== e.indexOf(".m3u8") ? "application/x-mpegURL" : -1 !== e.indexOf(".mp4") ? "video/mp4" : -1 !== e.indexOf(".mpg") ? "video/mp4" : -1 !== e.indexOf(".mpeg") ? "video/mp4" : -1 !== e.indexOf(".ogg") ? "video/ogg" : "video/mp4", "" != e && (iVideoCount < 1 && (iVideoCount++, k += "<video style='position:absolute;visible:hidden;display:none;z-index:" + (3e3 + I) + ";width:100%;height:100%;' " + u + " id='vidObj1'  preload='auto'  poster='md/black1px.png' regname='" + C + "' vidtype='native'>", k += "<source id='vidSrc1' src='" + e + "' type='" + S + "'></video>"), 1 == ++M && (B++, RegionListAdd(C, L, x, I, T, F), k += "<img id='imgScreen" + B + "Top' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' /><img id='imgScreen" + B + "Bottom' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' />"), RegionPlaylistAdd(B - 1, e, i, w, u, h, D, y, b, v, f)) } else if ("video2" == w) { u = $(this).find("effect").text(), h = 1, D = 5e3, S = "video/mp4", y = $(this).find("startdate").text(), b = $(this).find("stopdate").text(), v = $(this).find("starttime").text(), f = $(this).find("stoptime").text(); if (S = -1 !== e.indexOf(".m3u8") ? "application/x-mpegURL" : -1 !== e.indexOf(".mp4") ? "video/mp4" : -1 !== e.indexOf(".mpg") ? "video/mp4" : -1 !== e.indexOf(".mpeg") ? "video/mp4" : -1 !== e.indexOf(".ogg") ? "video/ogg" : "video/mp4", "" != e) { if (iVideoCount < 1) { iVideoCount++, k += "<video style='position:absolute;visible:hidden;display:none;z-index:" + (3e3 + I) + ";width:100%;height:100%;' " + u + " id='vidObj1'  preload='auto'  poster='md/black1px.png' regname='" + C + "' vidtype='vlc'>", k += "<source id='vidSrc1' src='" + e + "' type='" + S + "'></video>"; try { window.external.VLCPlayerDimension(L, x, T, F) } catch (e) { } } 1 == ++M && (B++, RegionListAdd(C, L, x, I, T, F), k += "<img id='imgScreen" + B + "Top' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' /><img id='imgScreen" + B + "Bottom' src='md/trans.gif' alt='' onerror='SlideOnError(this);' onload='SlideOnLoad(this);' regname='" + C + "' />"), RegionPlaylistAdd(B - 1, e, i, "video", u, h, D, y, b, v, f) } } }), a += k + "</div>", k = "" }), 1 == e ? showPrepDisplay(a) : (sDisplayContent = a, runDisplay2()) } function MarqueeRun() { for (var e = 1; e < 21; e++) try { $("#dvMQ" + e + "Tx").fitText(.7), $("#dvMQ" + e + "Tx").css("visibility", "visible"), $("#dvMQ" + e + "Tx").marquee({ leftToRight: !0, count: 1, speed: 10 }).done(MarqueeStop) } catch (e) { } } function MarqueeStop(e) { $("#" + e[0].id).marquee({ leftToRight: !0, count: 1, speed: 10 }).done(MarqueeStop) } function onFrameLoaded(e) { } function onFrameError() { MAlert("error") } function SetDeviceID(e) { sDeviceID = e; try { $("#spSTBIDLogin").html(sDeviceID), $("#spSTBIDLogin2").html(sDeviceID); try { window.localStorage.setItem("deviceid", sDeviceID) } catch (e) { } if ("windows" == sDevicePlatform) try { window.external.SetLocalStorage("deviceid", sDeviceID) } catch (e) { } } catch (e) { } } function SetDevicePlatform(e, t) { sDevicePlatform = e, sDevicePlatformVersion = t } function GetDeviceID() { return sDeviceID } function GetDevicePlatformName() { return sDevicePlatform } function GetDevicePlatformVersion() { return sDevicePlatformVersion } function ShowDownloadPercentage(e) { $("#spPrepPercent").html("(" + e + "%)") } $(document).ready(function () { try { document.addEventListener("touchmove", function (e) { e.preventDefault() }, !1) } catch (e) { } try { document.addEventListener("deviceready", onDeviceReady, !1) } catch (e) { } try { String.prototype.fileExist = function () { return filename = this.trim(), "200" == jQuery.ajax({ url: filename, type: "GET", method: "GET", isLocal: !1, cache: !1, crossDomain: !0, async: !1 }).status } } catch (e) { } initDevice(), setKeyPress() }); var textlogtry = 0, textlogireqtag = "0", textlogfname = "", textlogmime = ""; function getTextLog(e, t) { try { var i = getTextLogFolder(), a = i + t + ".txt"; if ("" != i) { if ("android" == sDevicePlatform) textlogtry = 0, textlogireqtag = "" + e, uploadFile(textlogfname = a, e, textlogmime = "text/plain"); else if ("windows" == sDevicePlatform) { var o = getURLLocation(sXMLUrl), s = window.external.HttpUploadFile("http://" + o.host + "/sendlog.php", a, "bindata", "text/plain", GetDeviceID(), "" + e, getRandomID(10)); s.indexOf("error") < 0 ? 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Upload text log success!") : 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Upload text log failed! Message: " + s) } 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/Upload text log " + a + ".txt success!") } else 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get text log " + a + " failed!") } catch (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get text log failed! " + e.message) } 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } function getScreenShot(i) { try { if ("android" == sDevicePlatform) navigator.screenshot.save(function (e, t) { if (e) 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed!"); else try { uploadFile(t.filePath, i, "image/jpeg") } catch (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed! " + e.message) } }, "jpg", 80, "" + getTodayNum() + getTimeStr()); else if ("windows" == sDevicePlatform) { try { var e = window.external.GetScreenShot("" + getTodayNum() + getTimeStr() + ".jpg"); if (e.indexOf("error") < 0) { var t = getURLLocation(sXMLUrl); 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot success!"), window.external.HttpUploadFile("http://" + t.host + "/sendlog.php", e, "bindata", "image/jpeg", GetDeviceID(), "" + i, getRandomID(10)).indexOf("error") < 0 ? 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Upload screenshot success!") : 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed!") } else 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed!") } catch (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed! " + e.message) } 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } } catch (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Get screenshot failed! " + e.message) } } function uploadFile(e, t, i) { var a = new FileUploadOptions; a.fileKey = "bindata", a.fileName = e, a.mimeType = i; var o = { act: "sendlog" }; o.deviceid = GetDeviceID(), o.reqtag = "" + t, o.r = getRandomID(10), a.params = o, a.chunkedMode = !1; try { var s = getURLLocation(sXMLUrl); 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Uploading " + e + " to http://" + s.host + "/sendlog.php"), (new FileTransfer).upload(e, "http://" + s.host + "/sendlog.php", function () { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Upload file success!"); 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) }, function (e) { if (1 == e.code && 1 == ++textlogtry) return void uploadFile(getAppStorageFolder() + "notfound.txt", textlogireqtag, textlogmime); 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Upload file failed! code = " + e.code); 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 17e3) }, a) } catch (e) { 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } } function showInfo() { MAlert("cordova.file.externalApplicationStorageDirectory = " + cordova.file.externalApplicationStorageDirectory) } function getFilename(t) { try { return t.replace(/^.*[\\\/]/, "") } catch (e) { return t } } function deleteCache() { try { var e = cordova.file.externalApplicationStorageDirectory; clearDirectory(e = e.replace("file://", "") + "cache/") } catch (e) { } } function clearDirectory(t) { try { window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (e) { e.root.getDirectory(t, { create: !0, exclusive: !1 }, function (e) { e.removeRecursively(function () { }, i) }, i) }, i) } catch (e) { } function i(e) { } } var sDisplayContent = ""; function showPrepDisplay(e) { try { sDisplayContent = e, $("#spRegions").html($("#dvPrepScreen").html()), iUpdatableDownloadCounter = 0, bDownloadFailed = !1, $("#spPrepInfo").html(""), $("#spPrepStatus").html("Downloading files..."), $("#spPrepFiles").html(iUpdatableDownloadCounter + 1 + "/" + arUpdatableFileList.length), arFileExistAnd = [], "windows" == GetDevicePlatformName() ? startDownload(iUpdatableDownloadCounter) : "android" == GetDevicePlatformName() && checkFileExistAndroid(iUpdatableDownloadCounter) } catch (e) { MAlert(e.message) } } var arFileExistAnd = []; function checkFileExistAndroid(e) { if (e < arUpdatableFileList.length) { var t = getFilenameFromURL(arUpdatableFileList[e]); t = "file:///" + getUpdatableFolder() + t, checkIfFileExists(t, e), checkFileExistAndroid(++iUpdatableDownloadCounter) } else iUpdatableDownloadCounter = 0, setTimeout("startDownload(" + iUpdatableDownloadCounter + ");", 2e3) } function startDownload(e) { if (e < arUpdatableFileList.length) { bDownloading = !0, setDownloadingStatus(), $("#spPrepPercent").html("(0%)"); var t = !1, i = !0; try { t = FileUpdatableExist(arUpdatableFileList[e], e) } catch (e) { } try { i = 0 != arUpdatableFileFlag[e] } catch (e) { } if (i || !t) downloadFile(arUpdatableFileList[e]); else { $("#spPrepInfo").html($("#spPrepInfo").html() + "<br/>" + getFilenameFromURL(arUpdatableFileList[e]) + "&nbsp;<font style='color:yellow'>Exist</font>"); var a = getFilenameFromURL(arUpdatableFileList[iUpdatableDownloadCounter]); a = getUpdatableFolder() + a; var o = MatchMD5(a, arUpdatableFileMD5[iUpdatableDownloadCounter], iUpdatableDownloadCounter); "windows" == GetDevicePlatformName() && (arUpdatableFileMD5Result[iUpdatableDownloadCounter] = o ? "1" : "0"), ++iUpdatableDownloadCounter < arUpdatableFileList.length ? ($("#spPrepFiles").html(iUpdatableDownloadCounter + 1 + "/" + arUpdatableFileList.length), startDownload(iUpdatableDownloadCounter)) : ($("#spPrepInfo").html($("#spPrepInfo").html() + "<br/><br/>Validating Files..."), bDownloadFailed || setTimeout("runDisplay();", 1e4)) } } else 0 == bDownloadFailed ? 0 == arUpdatableFileList.length && ($("#spPrepInfo").html(""), $("#spPrepStatus").html("Loading..."), $("#spPrepFiles").html(""), $("#spPrepPercent").html(""), setTimeout("runDisplay();", 1e4)) : (iRetryCount = 5, $("#btnReset2").css("visibility", "visible"), $("#spPrepInfo").html($("#spPrepInfo").html() + "<br/><br/>Retrying in " + iRetryCount + " second..."), setTimeout("retryDownload();", 2e3)) } var iRetryCount = 5; function retryDownload() { --iRetryCount < 2 ? $("#btnReset2").css("visibility", "hidden") : $("#btnReset2").css("visibility", "visible"), iRetryCount <= 0 ? ($("#spPrepInfo").html(""), loadLayoutFromStorage(!0)) : ($("#spPrepInfo").html($("#spPrepInfo").html() + "<br/>Retrying in " + iRetryCount + " second..."), setTimeout("retryDownload();", 2e3)) } function runDisplay() { bDownloading = !1, setDownloadingStatus(); for (var e = 0, t = 0; t < arUpdatableFileMD5Result.length; t++) "0" == arUpdatableFileMD5Result[t] && e++; if (0 < e) return $("#spRegions").html("<div style='width:100%;height:100%;background-color:black;'><center><h1 style='color:white;'><br/><br/><br/><br/><br/>Invalid content detected, please reset device!</h1></center></div>"), $(".dvReset").css("visibility", "visible"), void $(".dvReset").css("display", "block"); setTimeout("runDisplay2();", 5e3) } function runDisplay2() { $("#spRegions").html(sDisplayContent), $("#spPreLoadImages").html(sPreloadImages), setTimeout("MarqueeRun();", 5e3), setTimeout("setKeyPress();", 5e3), SetFirstImageForMixedContent(), iMixedContentTimerID = setInterval("MixedContentTimer();", 100), runCheckVersionTimer(), $(".dvReset").css("visibility", "visible"), $(".dvReset").css("display", "block") } function SetFirstImageForMixedContent() { try { for (var e = 0; e < listRegion.length; e++) for (var t = listRegion[e], i = t.playlistIndex, a = 0, o = 0, s = 0, r = 0, n = 100; 0 < n;) { try { a = parseInt(t.playlist[i].startdate, 10), o = parseInt(t.playlist[i].stopdate, 10); try { s = parseInt(t.playlist[i].starttime, 10), r = parseInt(t.playlist[i].stoptime, 10) } catch (e) { r = s = 0 } var l = getTodayNum(), d = parseInt(getTimeStr(), 10); isNaN(a) && (a = 0), isNaN(o) && (o = 0), isNaN(s) && (s = 0), isNaN(r) && (r = 0), r < s && (d < r && 0 <= d && (d += 24e4), r += 24e4), 0 == s && r && (s = 0, r = 235959), a <= l && l <= o && s <= d && d <= r ? $("#imgScreen" + (e + 1) + "Top").attr("src", listRegion[e].playlist[0].url) : $("#imgScreen" + (e + 1) + "Top").attr("src", "md/black1px.png") } catch (e) { } n-- } } catch (e) { } try { document.getElementById("vidObj1").addEventListener("ended", VideoEnded1) } catch (e) { } } function VideoStart(e) { try { if (isVideoPlaying = !(isVideoEnded = !1), "vlc" == $("#vidObj1").attr("vidtype")) try { "windows" == GetDevicePlatformName() && (window.external.VLCPlayerAddFile(e), window.external.VLCPlayerStart()) } catch (e) { setTimeout("VideoEnded1();", 1e3) } else { $("#vidObj1").css("visibility", "visible"), $("#vidObj1").css("display", "block"); var t = document.getElementById("vidObj1"); document.getElementById("vidSrc1").src = e, t.addEventListener("ended", VideoEnded1), t.load(), t.play() } try { WriteTextLog($("#vidObj1").attr("regname") + "|" + getFilenameFromURL(e) + "|success") } catch (e) { } } catch (e) { } } function VideoEnded1() { $("#vidObj1").css("visibility", "hidden"), isVideoPlaying = !(isVideoEnded = !0); try { "windows" == GetDevicePlatformName() && window.external.VLCPlayerStop() } catch (e) { } } var isVideoPlaying = !1, isVideoEnded = !1; function MixedContentTimer() { try { for (var e = 0; e < listRegion.length; e++) try { for (var t = listRegion[e], i = t.playlistIndex, a = 0, o = 0, s = 0, r = 0, n = 100; 0 < n;) { try { a = parseInt(t.playlist[i].startdate, 10), o = parseInt(t.playlist[i].stopdate, 10); try { s = parseInt(t.playlist[i].starttime, 10), r = parseInt(t.playlist[i].stoptime, 10) } catch (e) { r = s = 0 } var l = getTodayNum(), d = parseInt(getTimeStr(), 10); isNaN(a) && (a = 0), isNaN(o) && (o = 0), isNaN(s) && (s = 0), isNaN(r) && (r = 0), r < s && (d < r && 0 <= d && (d += 24e4), r += 24e4), 0 == s && r && (s = 0, r = 235959), a <= l && l <= o && s <= d && d <= r || "video" == t.playlist[i].media && (t.playlist[i].timer = t.playlist[i].duration) } catch (e) { } n-- } if (t.playlist[i].timer <= t.playlist[i].duration && !isVideoEnded) t.playlist[i].timer += 100, "video" == t.playlist[i].media && 1e3 < t.playlist[i].timer && (0 == isVideoPlaying && VideoStart(t.playlist[i].url), t.playlist[i].timer = 1500); else { t.playlist[i].timer = 0; var c = i + 1; for (a = 0, o = 0, s = 0, r = 0, n = 100; 0 < n;) { try { c >= t.playlist.length && (c = 0), a = parseInt(t.playlist[c].startdate, 10), o = parseInt(t.playlist[c].stopdate, 10); try { s = parseInt(t.playlist[c].starttime, 10), r = parseInt(t.playlist[c].stoptime, 10) } catch (e) { r = s = 0 } l = getTodayNum(), d = parseInt(getTimeStr(), 10); if (isNaN(a) && (a = 0), isNaN(o) && (o = 0), isNaN(s) && (s = 0), isNaN(r) && (r = 0), r < s && (d < r && 0 <= d && (d += 24e4), r += 24e4), 0 == s && r && (s = 0, r = 235959), a <= l && l <= o && s <= d && d <= r) { t.playlistIndex = c; break } c++ } catch (e) { } n-- } if (0 == n && (c = i, t.playlistIndex = c), c == i && "image" == t.playlist[c].media) continue; if ("image" == t.playlist[c].media) if ("video" == t.playlist[i].media) FadeTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z), isVideoEnded = !1, $("#vidObj1").css("visibility", "hidden"), $("#vidObj1").css("display", "none"); else switch (t.playlist[c].transtype) { case 1: FadeTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 2: LeftToRight("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 3: RightToLeft("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 4: TopToBottom("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 5: BottomToTop("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 6: ShrinkTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; case 7: ClipTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z); break; default: FadeTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "org" + (e + 1) + "-" + (c + 1), t.z) } else "video" == t.playlist[c].media && ("video" == t.playlist[i].media ? (t.playlist[i].timer = 0, t.playlist[c].timer = 0, isVideoEnded = isVideoPlaying = !1) : FadeTo("imgScreen" + (e + 1), "org" + (e + 1) + "-" + (i + 1), "imgBlack", t.z)) } } catch (e) { } } catch (e) { } } function setKeyPress() { try { $("#mkey").keypress(function (e) { if (27 == e.which); else if (96 == e.which) initContent(); else { if (42 != e.which) return; initContent() } e.preventDefault() }), $("#mkey").focus() } catch (e) { } } function runCheckVersionTimer() { "Offline" == sOnlineMode || (-1 != iVersionCheckTimer && clearInterval(iVersionCheckTimer), iVersionCheckTimer = setInterval("CheckVersion()", 3e4)) } function CheckVersion() { 1 == iShowDebugLog && ($("#spDebugDisplay").html(""), $("#dvDebugDisplay").removeClass("debughide").addClass("debugok")); try { var e = sXMLUrl; 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Getting " + e + " ..."), getJSONDataStringFromURLAsync("http://" + getURLLocation(sXMLUrl).host + "/getlayoutver.php", "act=getlayoutver&deviceid=" + GetDeviceID() + "&layoutid=" + sLayoutID + "&r=" + getRandomID(10), 1) } catch (e) { } 1 == iShowDebugLog && setTimeout("$('#dvDebugDisplay').removeClass('debugok').addClass('debughide');", 7e3) } function toggleDebugLog() { 1 == (iShowDebugLog *= -1) ? MAlert("Now showing debug log") : ($("#dvDebugDisplay").removeClass("debugok").addClass("debughide"), MAlert("Now hiding debug log")) } function CheckHB() { return getRandomID(10) }