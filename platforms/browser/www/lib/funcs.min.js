function getTodayNum() { var e, t = new Date, r = 0; e = "" + t.getFullYear() + ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"][t.getMonth()] + ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"][t.getDate()]; try { r = parseInt(e, 10) } catch (e) { r = 0 } return isNaN(r) && (r = 0), r } function getTimeStr() { var e = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60"], t = new Date; return "" + e[t.getHours()] + e[t.getMinutes()] + e[t.getSeconds()] } function getRandomID(e) { for (var t = "", r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", o = 0; o < e; o++) t += r.charAt(Math.floor(Math.random() * r.length)); return t } function MAlert(t) { if ("windows" == GetDevicePlatformName()) try { window.external.Alert(t) } catch (e) { alert(t) } else "android" == GetDevicePlatformName() && alert(t) } function MConfirm(t) { var r = !1; if ("windows" == GetDevicePlatformName()) try { r = 0 != window.external.Confirm(t) } catch (e) { r = confirm(t) } else "android" == GetDevicePlatformName() && (r = confirm(t)); return r } function escapeRegExp(e) { return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") } function removeLineBreaks(e) { var t = e.replace(/(\r\n|\n|\r)/gm, ""); return t = replaceAll(t = replaceAll(t, "%20", ""), " ", "") } function replaceAll(e, t, r) { return e.replace(new RegExp(t, "g"), r) } function getURLLocation(e) { var t = e.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)([\/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/); return t && { href: e, protocol: t[1], host: t[2], hostname: t[3], port: t[4], pathname: t[5], search: t[6], hash: t[7] } } function getFilenameFromURL(e) { var t = e; try { t = e.substring(e.lastIndexOf("/") + 1) } catch (e) { } return t } function FileUpdatableExist(e, t) { var r = getFilenameFromURL(e); return "windows" == GetDevicePlatformName() ? window.external.FileExist(r) : "android" == GetDevicePlatformName() && arFileExistAnd[t] } function checkIfFileExists(e, t) { window.resolveLocalFileSystemURL(e, function (e) { arFileExistAnd[t] = !0 }, function () { arFileExistAnd[t] = !1 }) } function getAppStorageFolder() { var e = ""; if ("android" == sDevicePlatform) try { e = cordova.file.externalApplicationStorageDirectory.replace("file://", "") + "files/" } catch (e) { MAlert(e.message) } return e } function getTextLogFolder() { var t = ""; if ("android" == sDevicePlatform) try { t = cordova.file.externalApplicationStorageDirectory.replace("file://", "") + "files/" } catch (e) { MAlert(e.message) } else if ("windows" == sDevicePlatform) try { t = window.external.GetTextLogFolder() } catch (e) { t = "/log/" } return t } function getUpdatableFolder() { var t = ""; if ("android" == sDevicePlatform) try { t = cordova.file.externalApplicationStorageDirectory.replace("file://", "") + "files/" } catch (e) { MAlert(e.message) } else if ("windows" == sDevicePlatform) try { t = window.external.GetUpdatableFolder() } catch (e) { t = "", "proto12345" == GetDeviceID() && (t = "C:/Users/User/Documents/GitHub/DDisplay/www/update/") } return t } var errorHandlerWriteToFile = function (e, t) { var r = ""; switch (t.code) { case FileError.QUOTA_EXCEEDED_ERR: r = "Storage quota exceeded"; break; case FileError.NOT_FOUND_ERR: r = "File not found"; break; case FileError.SECURITY_ERR: r = "Security error"; break; case FileError.INVALID_MODIFICATION_ERR: r = "Invalid modification"; break; case FileError.INVALID_STATE_ERR: r = "Invalid state"; break; default: r = "Unknown error " + t.code + " file = " + e } 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Error Handler = " + r) }; function writeToFile(t, r) { try { window.resolveLocalFileSystemURL("file://" + getTextLogFolder(), function (e) { e.getFile(t, { create: !0 }, function (e) { e.createWriter(function (e) { e.onwriteend = function (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Write notfound.txt success") }, e.onerror = function (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Write notfound.txt failed error code = " + e.code) }; var t = new Blob([r], { type: "text/plain" }); e.write(t) }, errorHandlerWriteToFile.bind(null, t)) }, errorHandlerWriteToFile.bind(null, t)) }, errorHandlerWriteToFile.bind(null, t)) } catch (e) { } } function gotFS(e) { e.root.getFile(getAppStorageFolder() + "notfound.txt", { create: !0 }, gotFileEntry, failFS) } function gotFileEntry(e) { e.createWriter(gotFileWriter, failFS) } function gotFileWriter(e) { e.onwrite = function (e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Write notfound.txt success") }, e.write("404"), e.abort() } function failFS(e) { 1 == iShowDebugLog && $("#spDebugDisplay").html($("#spDebugDisplay").html() + "<br/>Write notfound.txt failed error code = " + e.code) } var gbFileUrl = ""; function downloadFile(r) { try { if (r = removeLineBreaks(r), $("#spPrepInfo").html($("#spPrepInfo").html() + "<br />" + getFilenameFromURL(r)), "android" == sDevicePlatform) { var o = getUpdatableFolder(), i = r.replace(/^.*[\\\/]/, ""); window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (e) { e.root.getFile("dummy.html", { create: !0, exclusive: !1 }, function (e) { var t = new FileTransfer; e.remove(), t.onprogress = function (e) { var t = e.loaded / e.total * 100; t = Math.round(t), ShowDownloadPercentage(t) }, gbFileUrl = r, t.download(r, o + i, function (e) { DownloadDone(r, "false") }, function (e) { DownloadDone(r, "true") }) }, failDL) }, failDL) } else if ("windows" == sDevicePlatform) try { window.external.DownloadFile(r) } catch (e) { "proto12345" == GetDeviceID() ? DownloadDone(r, "false") : DownloadDone(r, "true") } else MAlert(sDevicePlatform) } catch (e) { MAlert(e.message) } } function failDL(e) { DownloadDone(gbFileUrl, "true") } function DownloadDone(e, t) { var r = ""; if ("true" == t) bDownloadFailed = !0, r = "<font style='color:red'>FAILED</font>"; else { var o = getFilenameFromURL(arUpdatableFileList[iUpdatableDownloadCounter]); r = "<font style='color:lightgreen'>OK</font>", MatchMD5(o = getUpdatableFolder() + o, arUpdatableFileMD5[iUpdatableDownloadCounter], iUpdatableDownloadCounter) ? "windows" == sDevicePlatform && (arUpdatableFileMD5Result[iUpdatableDownloadCounter] = "1") : "windows" == sDevicePlatform && (arUpdatableFileMD5Result[iUpdatableDownloadCounter] = "0") } $("#spPrepInfo").html($("#spPrepInfo").html() + "&nbsp;" + r), iUpdatableDownloadCounter++, iUpdatableDownloadCounter < arUpdatableFileList.length ? $("#spPrepFiles").html(iUpdatableDownloadCounter + 1 + "/" + arUpdatableFileList.length) : ($("#spPrepInfo").html($("#spPrepInfo").html() + "<br/><br/>Validating Files..."), bDownloadFailed || setTimeout("runDisplay();", 1e4)), startDownload(iUpdatableDownloadCounter) } function ClearAllTimeouts() { for (var e = window.setTimeout(function () { }, 0) ; e--;) window.clearTimeout(e) } var TransSpeed = "1000"; function FadeTo(e, t, r, o) { var i = o + 2e3, n = o + 1e3; $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "0"), $("#" + e + "Bottom").animate({ opacity: 1 }, 1e3), $("#" + e + "Top").fadeTo(TransSpeed, 0, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")) }) } function ClipTo(e, t, r, o) { var i = o + 2e3, n = o + 1e3; $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "1"), $("#" + e + "Top").effect("clip", {}, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")) }) } function ShrinkTo(e, t, r, o) { var i = o + 2e3, n = o + 1e3; $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "1"), $("#" + e + "Top").effect("scale", { percent: 0 }, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")) }) } function LeftToRight(e, t, r, o) { var i = o + 2e3, n = o + 1e3, a = "" + $("#" + e + "Top").css("width"); $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "0"), $("#" + e + "Bottom").animate({ opacity: 1 }, 1e3), $("#" + e + "Top").animate({ left: a, width: "0px" }, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")), $("#" + e + "Top").css("left", "0%"), $("#" + e + "Top").css("width", a) }) } function RightToLeft(e, t, r, o) { var i = o + 2e3, n = o + 1e3, a = "" + $("#" + e + "Top").css("width"); $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "0"), $("#" + e + "Bottom").animate({ opacity: 1 }, 1e3), $("#" + e + "Top").animate({ width: "0px" }, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")), $("#" + e + "Top").css("left", "0%"), $("#" + e + "Top").css("width", a) }) } function TopToBottom(e, t, r, o) { var i = o + 2e3, n = o + 1e3, a = "" + $("#" + e + "Top").css("height"); $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "0"), $("#" + e + "Bottom").animate({ opacity: 1 }, 1e3), $("#" + e + "Top").animate({ top: a, height: "0px" }, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")), $("#" + e + "Top").css("top", "0%"), $("#" + e + "Top").css("height", a) }) } function BottomToTop(e, t, r, o) { var i = o + 2e3, n = o + 1e3, a = "" + $("#" + e + "Top").css("height"); $("#" + e + "Top").attr("style", "z-index:" + i + ";"), $("#" + e + "Bottom").attr("style", "z-index:" + n + ";"), $("#" + e + "Top").attr("src", $("#" + t).attr("src")), $("#" + e + "Bottom").attr("src", $("#" + r).attr("src")), $("#" + e + "Bottom").css("opacity", "0"), $("#" + e + "Bottom").animate({ opacity: 1 }, 1e3), $("#" + e + "Top").animate({ height: "0px" }, TransSpeed, function () { $("#" + e + "Top").attr("src", $("#" + r).attr("src")), $("#" + e + "Top").css("top", "0%"), $("#" + e + "Top").css("height", a) }) } function WriteTextLog(e) { if ("android" == GetDevicePlatformName()) try { WriteTextLogAndroid(getTodayNum() + ".log", getTimeStr() + "|" + e + "\r\n") } catch (e) { } else if ("windows" == GetDevicePlatformName()) try { window.external.WriteTextLogWindows(getTextLogFolder(), e) } catch (e) { } } function WriteTextLogAndroid(t, r) { try { window.resolveLocalFileSystemURL("file://" + getTextLogFolder(), function (e) { e.getFile(t, { create: !0 }, function (e) { e.createWriter(function (e) { e.onwriteend = function (e) { }, e.onerror = function (e) { }; var t = new Blob([r], { type: "text/plain" }); 0 < e.length && e.seek(e.length), e.write(t) }, errorHandlerWriteToFile.bind(null, t)) }, errorHandlerWriteToFile.bind(null, t)) }, errorHandlerWriteToFile.bind(null, t)) } catch (e) { MAlert("WriteTextLogAndroid Exception : " + e.message) } } function SlideOnLoad(e) { try { var t = getFilenameFromURL(e.src); "black1px.png" == t || "trans.gif" == t || WriteTextLog(e.getAttribute("regname") + "|" + getFilenameFromURL(e.src) + "|success") } catch (e) { } } function SlideOnError(e) { try { WriteTextLog(e.getAttribute("regname") + "|" + getFilenameFromURL(e.src) + "|error"), e.src = "md/black1px.png" } catch (e) { } } function MatchMD5(e, t, r) { var o = !1; try { if ("windows" == sDevicePlatform) try { 1 == window.external.VerifyMD5(e, t) && (o = !0) } catch (e) { } else if ("android" == sDevicePlatform) try { 1 == VerifyMD5Android(e, t, r) && (o = !0) } catch (e) { } } catch (e) { o = !1 } return o } function VerifyMD5Android(e, t, r) { var o = 1; arUpdatableFileMD5Result[r] = "1"; try { if (-1 < e.indexOf(".mp4")) { var i = { data: "Hello World!", hash: "md5", idx: r }; window.hashString(i, function (e) { }), arUpdatableFileMD5Result[r] = "1", o = 1 } else { i = { data: e, hash: "md5", idx: r }; window.hashFile(i, function (e) { if (e.toLowerCase().trim() == t.toLowerCase().trim()) o = 1, arUpdatableFileMD5Result[i.idx] = "1"; else { o = 0, arUpdatableFileMD5Result[i.idx] = "0"; try { DeleteFileAndroid(i.data) } catch (e) { } } }) } } catch (e) { o = 0, arUpdatableFileMD5Result[r] = "0" } return o } function DeleteFileAndroid(e) { var t = "file://" + getUpdatableFolder(), r = getFilenameFromURL(e); window.resolveLocalFileSystemURL(t, function (e) { e.getFile(r, { create: !1 }, function (e) { e.remove(function () { }, function (e) { }, function () { }) }) }) } !function (c) { c.fn.fitText = function (e, t) { var r = (e = 1 / e) || 1, o = c.extend({ minFontSize: Number.NEGATIVE_INFINITY, maxFontSize: Number.POSITIVE_INFINITY }, t); return this.each(function () { function e() { t.width(); var e = t.height(); t.css("font-size", Math.max(Math.min(e / (1.1 * r), parseFloat(o.maxFontSize)), parseFloat(o.minFontSize))), t.css("line-height", e + "px"), t.css("vertical-align", "middle") } var t = c(this); e(), c(window).on("resize.fittext orientationchange.fittext", e) }) }, c.fn.marquee = function (t) { var r = c(this), o = r.textWidth(), i = r.width(), n = i, e = (r.css("text-indent"), r.css("overflow"), r.css("white-space"), { "text-indent": n, overflow: "hidden", "white-space": "nowrap" }), a = (t = c.extend(!0, { count: -1, speed: 10, leftToRight: !1 }, t), 0), l = -1 * o, s = c.Deferred(); return t.leftToRight ? (n = -1 * o, n++, l = i) : n--, r.css(e), function e() { if (!r.length) return s.reject(r); if (r.css("text-indent", n + "px"), t.leftToRight) { if (l <= ++n) { if (++a == t.count) return s.resolve(r); n = t.leftToRight ? -1 * o : i } } else if (--n <= l - 2 * o) { if (++a == t.count) return s.resolve(r); n = t.leftToRight ? -1 * o : i } setTimeout(e, t.speed) }(), s.promise(r) }, c.fn.textWidth = function () { var e = '<span style="display:none">' + c(this).text() + "</span>"; c("body").append(e); var t = c("body").find("span:last").width(); return c("body").find("span:last").remove(), t } }(jQuery); var zipProgressCallback = function (e) { }, zipCallback = function (e) { 0 == e && RunDisplayOffline(), -1 == e && (MAlert("Unable to load layout from zip file!"), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1)) }; function zipProcessUnZip(t, r) { try { window.zip.unzip(t, r, zipCallback, zipProgressCallback) } catch (t) { MAlert(e.message) } } function stbBrowseOffline() { sOfflinePass = sOfflineUser = sOfflineZipFile = ""; try { if ("windows" == sDevicePlatform) try { stbBrowseWin() } catch (e) { } else if ("android" == sDevicePlatform) try { stbBrowseAndroid() } catch (e) { } } catch (e) { } } function stbBrowseAndroid() { sOfflineZipFile = "", window.OurCodeWorld.Filebrowser.filePicker.single({ success: function (e) { e.length && (sOfflineZipFile = e[0], $("#spBrowseFile").html(sOfflineZipFile)) }, error: function (e) { sOfflineZipFile = "" } }) } function stbBrowseWin() { $("#btnBrowse").click(), sOfflineZipFile = $("#btnBrowse").val(), $("#spBrowseFile").html(sOfflineZipFile) } var sOfflineZipFile = "", sOfflineUser = "", sOfflinePass = ""; function stbLoadOffline() { if ("" != sOfflineZipFile) try { if (sOfflineUser = $("#txUserName2").val(), sOfflinePass = $("#txUserPass2").val(), "windows" == sDevicePlatform) try { var e = window.external.UnzipFile(sOfflineZipFile, getUpdatableFolder()); e.indexOf("Error") < 0 ? RunDisplayOffline() : MAlert(e) } catch (e) { MAlert(e.message) } else if ("android" == sDevicePlatform) try { zipProcessUnZip(sOfflineZipFile, getUpdatableFolder()) } catch (e) { MAlert(e.message) } } catch (e) { MAlert(e.message) } else MAlert("Select a file first!") } function RunDisplayOffline() { sXMLUrl = "file:///" + getUpdatableFolder() + "data.xml", MAlert("Layout file unzipped successfuly!"); var e = getXMLDataStringFromURL(sXMLUrl); if ("windows" == sDevicePlatform) { e.success = !1; try { e.data = window.external.ReadXML(sXMLUrl), e.success = !0 } catch (e) { } } if (!e.success) return MAlert("Unable to get layout!"), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1); sBufferXMLData = e.data; var t = !1, r = "", o = $("os", sBufferXMLData); if ($(o).each(function () { var e = $(this).find("guid").text(); r = e, $(this).find("deviceid").each(function () { GetDeviceID().toLowerCase() == $(this).text().toLowerCase() && (t = !0) }) }), t) { sMD5UserPassGlobal = r; var i = StringMD5(sOfflineUser + epas(sOfflinePass)).toLowerCase(); if ("windows" == sDevicePlatform) { if (r.toLowerCase() != i) return MAlert("Unauthorized user / wrong password!"), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1); if (setXMLDataStringToStorage(sBufferXMLData)) return deleteCache(), void loadLayoutFromStorage(!0) } } else { MAlert("Device is not registered to use this content!"); try { bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", $("#spRegions").html(sInitScreen1) } catch (e) { } } } function RunDisplayOfflineStep2() { return sMD5UserPassGlobal.toLowerCase() != sMD5ReturnGlobal.toLocaleLowerCase() ? (MAlert("Unauthorized user / wrong password!"), bFirstLoad = !0, deleteXMLDataStringFromStorage(), sBufferXMLData = "", void $("#spRegions").html(sInitScreen1)) : setXMLDataStringToStorage(sBufferXMLData) ? (deleteCache(), void loadLayoutFromStorage(!0)) : void 0 } function stbOnlineBack() { $("#spRegions").html(sInitScreen1), sOnlineMode = "Unknown" } function stbOfflineBack() { $("#spRegions").html(sInitScreen1), sOnlineMode = "Unknown" } function stbOnlineClicked() { $("#spRegions").html($("#dvInitLogin1").html()), sOnlineMode = "Online" } function stbOfflineClicked() { sOfflineZipFile = "", $("#spRegions").html($("#dvInitLogin2").html()), sOnlineMode = "Offline" } function epas(e) { var t = ""; try { for (var r = 0; r < e.length; r++) t += e.charCodeAt(r) - 23 } catch (e) { t = !1 } return t } var sMD5ReturnGlobal = "", sMD5UserPassGlobal = ""; function StringMD5(e) { var t = ""; if ("windows" == sDevicePlatform) try { t = window.external.StringMD5(e) } catch (e) { } else if ("android" == sDevicePlatform) try { var r = { data: e, hash: "md5" }; window.hashString(r, function (e) { sMD5ReturnGlobal = t = e, RunDisplayOfflineStep2() }) } catch (e) { MAlert(e.message) } return t }